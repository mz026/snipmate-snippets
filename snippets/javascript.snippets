# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function without semi-colon
snippet f
	function(${1}) {
		${2: // body...}
	}
# Anonymous Function with semi-colon
snippet f;
	function(${1}) {
		${2: // body...}
	};
# Immediate function
snippet (f)
	(function(${1}) {
		${3:/* code */}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# try
snippet try
	try {
		${1:/* code */}
	} catch(e) {
		${2:/* handle error */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# Get Element
snippet try
	try {
		${2}
	} catch (${2:e}) {
	}
# console.log (Firebug)
snippet cl
	console.log(${1});
# jasmine style test cases
# describe
snippet desc
	describe('${1}', function(){
	  ${2://test codes here}
	});
# test example
snippet it
	it('${1:should pass}', function(){
	  ${2://test codes here}
	});
snippet itd
	it('${1:should pass}', function(done){
	  ${2://test codes here}
	});
snippet bef
	beforeEach(function(){
	  ${1://codes here}
	});
snippet aft
	afterEach(function(){
	  ${1://codes here}
	});
snippet befi
	beforeEach(inject(function(${1:injectables}){
	  ${2://codes here}
	}));
snippet iti
	it('${1:should pass}', inject(function(${2:injectables}){
	  ${3://codes here}
	}));
snippet req
	var ${1:moduleName} = require('${2:module/path}');
snippet imp
	import ${1:moduleName} from '${2:modulePath}';
